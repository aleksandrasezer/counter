{"version":3,"sources":["components/redux/counter-reducer.tsx","components/Button.tsx","components/Input.tsx","components/setCounterBox/SetCounterContainer.tsx","components/setCounterBox/Setcounter.tsx","components/counterBox/CounterContainer.tsx","components/counterBox/Counter.tsx","App.tsx","reportWebVitals.ts","components/redux/redux-store.tsx","components/redux/localStorage.ts","index.tsx"],"names":["ON_CHANGE_MAX_VALUE","ON_CHANGE_MIN_VALUE","INCREMENT_COUNT","RESET_COUNT","SET_COUNT","initialState","minValue","maxValue","count","Button","props","className","onClick","disabled","title","Input","type","onChange","e","currentTarget","value","SetCounterContainer","connect","state","counterPage","dispatch","onChangeMaxVal","onChangeMaxValueAC","onChangeMinVal","onChangeMinValueAC","setCount","minInputClassName","maxInputClassName","maxVal","minVal","CounterContainer","incrementF","resetF","numToShow","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","serializedState","localStorage","getItem","undefined","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNACMA,EAAsB,sBACtBC,EAAsB,sBACtBC,EAAkB,kBAClBC,EAAc,cACdC,EAAY,YAYdC,EAAe,CACfC,SAAU,EACVC,SAAU,GACVC,MAAO,G,OCZJ,SAASC,EAAOC,GACnB,OACI,mCACI,wBAAQC,UAAU,SACVC,QAASF,EAAME,QACfC,SAAUH,EAAMG,SAFxB,SAEmCH,EAAMI,UCL9C,SAASC,EAAML,GAQlB,OACI,mCACI,uBAAOC,UAAWD,EAAMC,UACjBK,KAAK,SACLC,SAVc,SAACC,GACtBA,EAAEC,eACFT,EAAMO,UAAUC,EAAEC,cAAcC,QASzBA,MAAOV,EAAMU,UChBhC,IAeWC,EAAsBC,aAfX,SAACC,GACnB,MAAO,CAEHhB,SAAUgB,EAAMC,YAAYjB,SAC5BD,SAAUiB,EAAMC,YAAYlB,aAGX,SAACmB,GACtB,MAAO,CACHC,eAAgB,SAACnB,GAAD,OAAsBkB,EHgCZ,SAAClB,GAC/B,MAAO,CACHS,KAAMhB,EACNO,YGnC+CoB,CAAmBpB,KAClEqB,eAAgB,SAACtB,GAAD,OAAsBmB,EHqCZ,SAACnB,GAC/B,MAAO,CACHU,KAAMf,EACNK,YGxC+CuB,CAAmBvB,KAClEwB,SAAU,kBAAML,EHqDb,CACHT,KAAMZ,QGlDmBkB,ECR1B,SAAoBZ,GAEvB,IAGMqB,EAAoBrB,EAAMJ,SAAW,EAAI,QAAU,GACnD0B,EAAoBtB,EAAMH,SAAW,GAAK,QAAU,GAE1D,OACI,sBAAKI,UAAU,YAAf,UACI,sBAAKA,UAAU,SAAf,UACI,gCACI,+CACA,cAACI,EAAD,CAAOJ,UAAWqB,EACXf,SAZS,SAACgB,GAAD,OAAoBvB,EAAMgB,eAAeO,IAalDb,MAAOV,EAAMH,cAGxB,gCACI,+CACA,cAACQ,EAAD,CAAOJ,UAAWoB,EACXd,SAlBS,SAACiB,GAAD,OAAoBxB,EAAMkB,eAAeM,IAmBlDd,MAAOV,EAAMJ,iBAG5B,qBAAKK,UAAU,mBAAf,SACI,cAACF,EAAD,CAAQI,SAAUH,EAAMJ,SAAW,GAAKI,EAAMH,SAAW,KAAOG,EAAMH,SAAWG,EAAMJ,SAC/EM,QAASF,EAAMoB,SACfhB,MAAM,gBCnC9B,IAcWqB,EAAmBb,aAdR,SAACC,GACnB,MAAO,CACHf,MAAOe,EAAMC,YAAYhB,MACzBD,SAAUgB,EAAMC,YAAYjB,SAC5BD,SAAUiB,EAAMC,YAAYlB,aAGX,SAACmB,GACtB,MAAO,CACHW,WAAY,kBAAMX,EL6Cf,CACHT,KAAMd,KK7CNmC,OAAQ,kBAAMZ,ELiDX,CACHT,KAAMb,QK9CgBmB,ECPvB,SAAiBZ,GACpB,IACI4B,EAAY5B,EAAMJ,SAAW,GAAKI,EAAMH,SAAW,GAAK,8BAAgCG,EAAMF,MAElG,OACI,sBAAKG,UAAU,YAAf,UAEI,qBAAKA,UANaD,EAAMF,QAAUE,EAAMH,SAAW,YAAc,SAMjE,SAAgC+B,IAGhC,sBAAK3B,UAAU,mBAAf,UAEI,cAACF,EAAD,CAAQI,SAAUH,EAAMF,QAAUE,EAAMH,SAChCK,QAASF,EAAM0B,WACftB,MAAM,QAEd,cAACL,EAAD,CAAQG,QAASF,EAAM2B,OACfxB,SAAUH,EAAMF,QAAUE,EAAMJ,SAChCQ,MAAM,mBCdfyB,MAVf,WAEI,OACI,sBAAK5B,UAAU,MAAf,UACI,cAACU,EAAD,IACA,cAACc,EAAD,QCGGK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCLVQ,EAAWC,YAAgB,CAC3B1B,YToBwB,WAAmF,IAAlFD,EAAiF,uDAAvDlB,EAAc8C,EAAyC,uCAC1G,OAAOA,EAAOnC,MACV,KAAKhB,EACD,OAAO,2BAAIuB,GAAX,IAAkBhB,SAAU4C,EAAO5C,WAEvC,KAAKN,EACD,OAAO,2BAAIsB,GAAX,IAAkBjB,SAAU6C,EAAO7C,WAEvC,KAAKJ,EACD,OAAO,2BAAIqB,GAAX,IAAkBf,MAAOe,EAAMf,MAAQ,IAE3C,KAAKL,EAGL,KAAKC,EACD,OAAO,2BAAImB,GAAX,IAAkBf,MAAOe,EAAMjB,WAEnC,QAAS,OAAOiB,MSlCb6B,EAAQC,YAAYJ,ECNN,WACrB,IACI,IAAMK,EAAkBC,aAAaC,QAAQ,aAC7C,OAA4B,OAApBF,OAA4BG,EAAYC,KAAKC,MAAML,GAC7D,MAAOM,GACL,QDCiCC,IAEzCT,EAAMU,WAAU,YCES,SAACvC,GACtB,IACI,IAAM+B,EAAkBI,KAAKK,UAAUxC,GACvCgC,aAAaS,QAAQ,YAAaV,GACpC,WDLFW,CAAU,CACNzC,YAAa4B,EAAMc,WAAW1C,iBEJtC2C,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUjB,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRkB,SAASC,eAAe,SAM5B/B,M","file":"static/js/main.12896bb6.chunk.js","sourcesContent":["\r\nconst ON_CHANGE_MAX_VALUE = 'ON_CHANGE_MAX_VALUE'\r\nconst ON_CHANGE_MIN_VALUE = 'ON_CHANGE_MIN_VALUE'\r\nconst INCREMENT_COUNT = 'INCREMENT_COUNT'\r\nconst RESET_COUNT = 'RESET_COUNT'\r\nconst SET_COUNT = 'SET_COUNT'\r\n\r\ntype ActionType = ReturnType<typeof onChangeMaxValueAC> |\r\n    ReturnType<typeof onChangeMinValueAC> | ReturnType<typeof incrementCountAC> |\r\n    ReturnType<typeof resetCountAC> | ReturnType<typeof setCountAC>\r\n\r\ntype InitialStateType = {\r\n    minValue: number\r\n    maxValue: number\r\n    count: number\r\n}\r\n\r\nlet initialState = {\r\n    minValue: 0,\r\n    maxValue: 10,\r\n    count: 0\r\n}\r\n\r\n\r\n\r\nexport let counterReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch(action.type) {\r\n        case ON_CHANGE_MAX_VALUE:\r\n            return {...state, maxValue: action.maxValue}\r\n\r\n        case ON_CHANGE_MIN_VALUE:\r\n            return {...state, minValue: action.minValue}\r\n\r\n        case INCREMENT_COUNT:\r\n            return {...state, count: state.count + 1}\r\n\r\n        case RESET_COUNT:\r\n            return {...state, count: state.minValue}\r\n\r\n        case SET_COUNT:\r\n            return {...state, count: state.minValue}\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const onChangeMaxValueAC = (maxValue: number) => {\r\n    return {\r\n        type: ON_CHANGE_MAX_VALUE,\r\n        maxValue\r\n    } as const\r\n}\r\nexport const onChangeMinValueAC = (minValue: number) => {\r\n    return {\r\n        type: ON_CHANGE_MIN_VALUE,\r\n        minValue\r\n    } as const\r\n}\r\nexport const incrementCountAC = () => {\r\n    return {\r\n        type: INCREMENT_COUNT\r\n    } as const\r\n}\r\nexport const resetCountAC = () => {\r\n    return {\r\n        type: RESET_COUNT\r\n    } as const\r\n}\r\nexport const setCountAC = () => {\r\n    return {\r\n        type: SET_COUNT\r\n    } as const\r\n}\r\n\r\n\r\n","import React, {MouseEventHandler} from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClick: MouseEventHandler<HTMLButtonElement>\r\n    disabled: boolean\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    return (\r\n        <>\r\n            <button className='button'\r\n                    onClick={props.onClick}\r\n                    disabled={props.disabled}>{props.title}</button>\r\n        </>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    className: string\r\n    onChange: (n: number) => void\r\n    value: number\r\n}\r\n\r\nexport function Input(props: InputPropsType) {\r\n\r\n    const onChangeValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget) {\r\n            props.onChange(+e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input className={props.className}\r\n                   type='number'\r\n                   onChange={onChangeValueHandler}\r\n                   value={props.value}/>\r\n        </>\r\n    )\r\n}","import {connect} from \"react-redux\";\r\nimport {AppDispatch, RootState} from \"../redux/redux-store\";\r\nimport {onChangeMaxValueAC, onChangeMinValueAC, setCountAC} from \"../redux/counter-reducer\";\r\nimport {SetCounter} from \"./Setcounter\";\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n\r\n        maxValue: state.counterPage.maxValue,\r\n        minValue: state.counterPage.minValue\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: AppDispatch) => {\r\n    return {\r\n        onChangeMaxVal: (maxValue: number) => dispatch(onChangeMaxValueAC(maxValue)),\r\n        onChangeMinVal: (minValue: number) => dispatch(onChangeMinValueAC(minValue)),\r\n        setCount: () => dispatch(setCountAC())\r\n    }\r\n}\r\n\r\nexport let SetCounterContainer = connect(mapStateToProps,mapDispatchToProps)(SetCounter)","import React from \"react\";\r\nimport {Button} from \"../Button\";\r\nimport {Input} from \"../Input\";\r\n\r\ntype SetcounterPropsType = {\r\n    onChangeMaxVal: (v: number) => void\r\n    onChangeMinVal: (v: number) => void\r\n    maxValue: number\r\n    minValue: number\r\n    setCount: () => void\r\n}\r\n\r\nexport function SetCounter(props: SetcounterPropsType) {\r\n\r\n    const onChangeMaxValueHandler = (maxVal: number) => props.onChangeMaxVal(maxVal)\r\n    const onChangeMinValueHandler = (minVal: number) => props.onChangeMinVal(minVal)\r\n\r\n    const minInputClassName = props.minValue < 0 ? 'error' : ''\r\n    const maxInputClassName = props.maxValue > 10 ? 'error' : ''\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='number'>\r\n                <div>\r\n                    <span>max value: </span>\r\n                    <Input className={maxInputClassName}\r\n                           onChange={onChangeMaxValueHandler}\r\n                           value={props.maxValue} />\r\n                </div>\r\n\r\n                <div>\r\n                    <span>min value: </span>\r\n                    <Input className={minInputClassName}\r\n                           onChange={onChangeMinValueHandler}\r\n                           value={props.minValue}/>\r\n                </div>\r\n            </div>\r\n            <div className='buttonsContainer'>\r\n                <Button disabled={props.minValue < 0 || props.maxValue > 100 || props.maxValue < props.minValue}\r\n                        onClick={props.setCount}\r\n                        title='set'/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {connect} from \"react-redux\";\r\nimport {AppDispatch, RootState} from \"../redux/redux-store\";\r\nimport {incrementCountAC, resetCountAC} from \"../redux/counter-reducer\";\r\nimport {Counter} from \"./Counter\";\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        count: state.counterPage.count,\r\n        maxValue: state.counterPage.maxValue,\r\n        minValue: state.counterPage.minValue,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: AppDispatch) => {\r\n    return {\r\n        incrementF: () => dispatch(incrementCountAC()),\r\n        resetF: () => dispatch(resetCountAC())\r\n    }\r\n}\r\n\r\nexport let CounterContainer = connect(mapStateToProps,mapDispatchToProps)(Counter)","import React from \"react\";\r\nimport {Button} from \"../Button\";\r\n\r\n\r\ntype CounterPropsType = {\r\n    count: number\r\n    incrementF: () => void\r\n    resetF: () => void\r\n    maxValue: number\r\n    minValue: number\r\n}\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n    const changeColor = () => props.count === props.maxValue ? 'numberRed' : 'number'\r\n    let numToShow = props.minValue < 0 || props.maxValue > 10 ? 'acceptable numbers: 0 to 10' : props.count\r\n\r\n    return (\r\n        <div className='container'>\r\n\r\n            <div className={changeColor()}>{numToShow}</div>\r\n\r\n\r\n            <div className='buttonsContainer'>\r\n\r\n                <Button disabled={props.count === props.maxValue}\r\n                        onClick={props.incrementF}\r\n                        title='inc' />\r\n\r\n                <Button onClick={props.resetF}\r\n                        disabled={props.count === props.minValue}\r\n                        title='reset'/>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\n\r\nimport {SetCounterContainer} from \"./components/setCounterBox/SetCounterContainer\";\r\nimport {CounterContainer} from \"./components/counterBox/CounterContainer\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <SetCounterContainer/>\r\n            <CounterContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {counterReducer} from \"./counter-reducer\";\r\nimport {combineReducers, createStore} from \"redux\";\r\nimport {loadState, saveState} from \"./localStorage\";\r\n\r\nlet reducers = combineReducers({\r\n    counterPage: counterReducer\r\n})\r\n\r\nexport let store = createStore(reducers, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counterPage: store.getState().counterPage\r\n    })\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch","import {RootState} from \"./redux-store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        return (serializedState === null) ? undefined : JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const saveState = (state: RootState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./components/redux/redux-store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}