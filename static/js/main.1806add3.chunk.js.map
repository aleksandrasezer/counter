{"version":3,"sources":["components/Button.tsx","components/Counter.tsx","components/Setcounter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","onClick","disabled","title","Counter","numToShow","minValue","maxValue","num","isValueSet","incrementF","resetF","Setcounter","minInputClassName","maxInputClassName","type","onChange","e","maxValueChanged","currentTarget","value","minValueChanged","setValues","App","useState","setNum","setMaxValue","setMinValue","setIsValueSet","useEffect","maxValueStr","localStorage","getItem","maxValueNum","JSON","parse","minValueStr","minValueNum","currentValue","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1806add3.chunk.js","sourcesContent":["import React, {MouseEventHandler} from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClick: MouseEventHandler<HTMLButtonElement>\r\n    disabled: boolean\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    return (\r\n        <>\r\n            <button className='button'\r\n                    onClick={props.onClick}\r\n                    disabled={props.disabled}>{props.title}</button>\r\n        </>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport {Button} from \"./Button\";\r\nimport {Setcounter} from \"./Setcounter\";\r\n\r\ntype CounterPropsType = {\r\n    num: number\r\n    incrementF: () => void\r\n    resetF: () => void\r\n    maxValue: number\r\n    minValue: number\r\n    isValueSet: boolean\r\n}\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n    const changeColor = () => props.num === props.maxValue ? 'numberRed' : 'number'\r\n    let numToShow = props.minValue < 0 || props.maxValue > 10 ? 'acceptable numbers: 0 to 10' : props.num\r\n\r\n    return (\r\n        <div className='container'>\r\n\r\n            <div className={changeColor()}>{props.isValueSet ? numToShow : 'choose your range'}</div>\r\n\r\n\r\n            <div className='buttonsContainer'>\r\n                <Button disabled={props.num === props.maxValue}\r\n                        onClick={props.incrementF}\r\n                        title='inc' />\r\n                <Button onClick={props.resetF}\r\n                        disabled={props.num === props.minValue}\r\n                        title='reset'/>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import React, {ChangeEvent, ChangeEventHandler} from \"react\";\r\nimport {Button} from \"./Button\";\r\n\r\ntype SetcounterPropsType = {\r\n    maxValueChanged: (v: number) => void\r\n    minValueChanged: (v: number) => void\r\n    maxValue: number\r\n    minValue: number\r\n    setValues: () => void\r\n}\r\n\r\nexport function Setcounter(props: SetcounterPropsType) {\r\n    const onChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.maxValueChanged(+e.currentTarget.value)\r\n    }\r\n    const onChangeMinValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.minValueChanged(+e.currentTarget.value)\r\n    }\r\n    const minInputClassName = props.minValue < 0 ? 'error' : ''\r\n    const maxInputClassName = props.maxValue > 10 ? 'error' : ''\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='number'>\r\n                <div>\r\n                    <span>max value: </span>\r\n                    <input className={maxInputClassName}\r\n                           type='number'\r\n                           onChange={onChangeMaxValueHandler}\r\n                           value={props.maxValue}/>\r\n                </div>\r\n                <div>\r\n                    <span>min value: </span>\r\n                    <input className={minInputClassName}\r\n                           type='number'\r\n                           onChange={(onChangeMinValueHandler)}\r\n                           value={props.minValue}/>\r\n                </div>\r\n            </div>\r\n            <div className='buttonsContainer'>\r\n                <Button disabled={props.minValue < 0 || props.maxValue > 10}\r\n                        onClick={props.setValues}\r\n                        title='set'/>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter\";\nimport {Setcounter} from \"./components/Setcounter\";\n\nfunction App() {\n    const [num, setNum] = useState(0)\n    const [maxValue, setMaxValue] = useState(10)\n    const [minValue, setMinValue] = useState(0)\n    const [isValueSet, setIsValueSet] = useState(false)\n\n    useEffect(() => {\n        let maxValueStr = localStorage.getItem('max value')\n        if (maxValueStr) {\n            let maxValueNum = JSON.parse(maxValueStr)\n            setMaxValue(maxValueNum)\n        }\n    }, [])\n\n    useEffect(() => {\n        let minValueStr = localStorage.getItem('min value')\n        if (minValueStr) {\n            let minValueNum = JSON.parse(minValueStr)\n            setMinValue(minValueNum)\n        }\n    }, [])\n\n    const incrementF = () => setNum(num + 1)\n\n    const resetF = () => setNum(minValue)\n\n    const maxValueChanged = (currentValue: number) => setMaxValue(currentValue)\n\n    const minValueChanged = (currentValue: number) => setMinValue(currentValue)\n\n    const setValues = () => {\n        setNum(minValue)\n        setIsValueSet(true)\n        localStorage.setItem('max value', JSON.stringify(maxValue))\n        localStorage.setItem('min value', JSON.stringify(minValue))\n    }\n\n\n\n    return (\n        <div className=\"App\">\n            <Setcounter maxValueChanged={maxValueChanged}\n                        minValueChanged={minValueChanged}\n                        maxValue={maxValue}\n                        minValue={minValue}\n                        setValues={setValues}/>\n            <Counter num={num}\n                     maxValue={maxValue}\n                     minValue={minValue}\n                     incrementF={incrementF}\n                     resetF={resetF}\n                     isValueSet={isValueSet}/>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}