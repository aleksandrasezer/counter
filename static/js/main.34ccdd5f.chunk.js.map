{"version":3,"sources":["components/redux/counter-reducer.tsx","components/Button.tsx","components/Input.tsx","components/counterBox/Setcounter.tsx","components/counterBox/Counter.tsx","components/counterBox/CounterPageContainer.tsx","App.tsx","reportWebVitals.ts","components/redux/redux-store.tsx","components/redux/localStorage.ts","index.tsx"],"names":["ON_CHANGE_MAX_VALUE","ON_CHANGE_MIN_VALUE","INCREMENT_COUNT","RESET_COUNT","SET_COUNT","initialState","minValue","maxValue","count","Button","props","className","onClick","disabled","title","Input","limit","type","onChange","e","currentTarget","value","SetCounter","minInputClassName","maxInputClassName","maxVal","onChangeMaxVal","minVal","onChangeMinVal","setCount","Counter","numToShow","disabledInc","disabledReset","incrementF","resetF","CounterPageContainer","dispatch","useDispatch","useSelector","state","counterPage","onChangeMaxValueAC","onChangeMinValueAC","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","serializedState","localStorage","getItem","undefined","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34ccdd5f.chunk.js","sourcesContent":["\r\nconst ON_CHANGE_MAX_VALUE = 'ON_CHANGE_MAX_VALUE'\r\nconst ON_CHANGE_MIN_VALUE = 'ON_CHANGE_MIN_VALUE'\r\nconst INCREMENT_COUNT = 'INCREMENT_COUNT'\r\nconst RESET_COUNT = 'RESET_COUNT'\r\nconst SET_COUNT = 'SET_COUNT'\r\n\r\nexport type ActionType = ReturnType<typeof onChangeMaxValueAC> |\r\n    ReturnType<typeof onChangeMinValueAC> | ReturnType<typeof incrementCountAC> |\r\n    ReturnType<typeof resetCountAC> | ReturnType<typeof setCountAC>\r\n\r\ntype InitialStateType = {\r\n    minValue: number\r\n    maxValue: number\r\n    count: number\r\n}\r\n\r\nlet initialState = {\r\n    minValue: 0,\r\n    maxValue: 10,\r\n    count: 0\r\n}\r\n\r\n\r\n\r\nexport let counterReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch(action.type) {\r\n        case ON_CHANGE_MAX_VALUE:\r\n            return {...state, maxValue: action.maxValue}\r\n\r\n        case ON_CHANGE_MIN_VALUE:\r\n            return {...state, minValue: action.minValue}\r\n\r\n        case INCREMENT_COUNT:\r\n            return {...state, count: state.count + 1}\r\n\r\n        case RESET_COUNT:\r\n            return {...state, count: state.minValue}\r\n\r\n        case SET_COUNT:\r\n            return {...state, count: state.minValue}\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const onChangeMaxValueAC = (maxValue: number) => {\r\n    return {\r\n        type: ON_CHANGE_MAX_VALUE,\r\n        maxValue\r\n    } as const\r\n}\r\nexport const onChangeMinValueAC = (minValue: number) => {\r\n    return {\r\n        type: ON_CHANGE_MIN_VALUE,\r\n        minValue\r\n    } as const\r\n}\r\nexport const incrementCountAC = () => {\r\n    return {\r\n        type: INCREMENT_COUNT\r\n    } as const\r\n}\r\nexport const resetCountAC = () => {\r\n    return {\r\n        type: RESET_COUNT\r\n    } as const\r\n}\r\nexport const setCountAC = () => {\r\n    return {\r\n        type: SET_COUNT\r\n    } as const\r\n}\r\n\r\n\r\n","import React, {MouseEventHandler} from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    onClick: MouseEventHandler<HTMLButtonElement>\r\n    disabled: boolean\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    return (\r\n        <>\r\n            <button className='button'\r\n                    onClick={props.onClick}\r\n                    disabled={props.disabled}>{props.title}</button>\r\n        </>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype InputPropsType = {\r\n    className: string\r\n    onChange: (n: number) => void\r\n    value: number\r\n    limit: string\r\n}\r\n\r\nexport function Input(props: InputPropsType) {\r\n\r\n    const onChangeValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget) {\r\n            props.onChange(+e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <span>{props.limit}</span>\r\n            <input className={props.className}\r\n                   type='number'\r\n                   onChange={onChangeValueHandler}\r\n                   value={props.value}/>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport {Button} from \"../Button\";\r\nimport {Input} from \"../Input\";\r\n\r\ntype SetcounterPropsType = {\r\n    onChangeMaxVal: (v: number) => void\r\n    onChangeMinVal: (v: number) => void\r\n    maxValue: number\r\n    minValue: number\r\n    setCount: () => void\r\n}\r\n\r\nexport function SetCounter(props: SetcounterPropsType) {\r\n\r\n    const onChangeMaxValueHandler = (maxVal: number) => props.onChangeMaxVal(maxVal)\r\n    const onChangeMinValueHandler = (minVal: number) => props.onChangeMinVal(minVal)\r\n\r\n    const minInputClassName = props.minValue < 0 ? 'error' : ''\r\n    const maxInputClassName = props.maxValue > 10 ? 'error' : ''\r\n\r\n    const disabled = props.minValue < 0 || props.maxValue > 10 || props.maxValue < props.minValue\r\n    return (\r\n        <div className='container'>\r\n            <div className='number'>\r\n                <div>\r\n                    <Input className={maxInputClassName}\r\n                           onChange={onChangeMaxValueHandler}\r\n                           value={props.maxValue}\r\n                           limit='max value: '/>\r\n\r\n                </div>\r\n\r\n                <div>\r\n                    <Input className={minInputClassName}\r\n                           onChange={onChangeMinValueHandler}\r\n                           value={props.minValue}\r\n                           limit='min value: '/>\r\n                </div>\r\n            </div>\r\n            <div className='buttonsContainer'>\r\n                <Button disabled={disabled}\r\n                        onClick={props.setCount}\r\n                        title='set'/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Button} from \"../Button\";\r\n\r\n\r\ntype CounterPropsType = {\r\n    count: number\r\n    incrementF: () => void\r\n    resetF: () => void\r\n    maxValue: number\r\n    minValue: number\r\n}\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n\r\n    const changeColor = () => props.count === props.maxValue ? 'numberRed' : 'number'\r\n    let numToShow = props.minValue < 0 || props.maxValue > 10 ? 'acceptable numbers: 0 to 10' : props.count\r\n\r\n    const disabledInc = props.count === props.maxValue\r\n    const disabledReset = props.count === props.minValue\r\n\r\n    return (\r\n        <div className='container'>\r\n\r\n            <div className={changeColor()}>\r\n                {numToShow}\r\n            </div>\r\n\r\n            <div className='buttonsContainer'>\r\n\r\n                <Button onClick={props.incrementF}\r\n                        disabled={disabledInc}\r\n                        title='inc'/>\r\n\r\n                <Button onClick={props.resetF}\r\n                        disabled={disabledReset}\r\n                        title='reset'/>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    ActionType,\r\n    incrementCountAC,\r\n    onChangeMaxValueAC,\r\n    onChangeMinValueAC, resetCountAC,\r\n    setCountAC\r\n} from \"../redux/counter-reducer\";\r\nimport {RootState} from \"../redux/redux-store\";\r\nimport {SetCounter} from \"./Setcounter\";\r\nimport {Counter} from \"./Counter\";\r\n\r\n\r\nexport const CounterPageContainer = () => {\r\n\r\n    const dispatch = useDispatch<Dispatch<ActionType>>()\r\n    const {count, maxValue, minValue} = useSelector((state: RootState) => state.counterPage)\r\n\r\n    const onChangeMaxVal = (maxValue: number) => dispatch(onChangeMaxValueAC(maxValue))\r\n    const onChangeMinVal = (minValue: number) => dispatch(onChangeMinValueAC(minValue))\r\n    const setCount = () => dispatch(setCountAC())\r\n    const incrementF = () => dispatch(incrementCountAC())\r\n    const resetF = () => dispatch(resetCountAC())\r\n\r\n    return <>\r\n        <>\r\n            <SetCounter onChangeMaxVal={onChangeMaxVal}\r\n                        onChangeMinVal={onChangeMinVal}\r\n                        setCount={setCount}\r\n                        maxValue={maxValue}\r\n                        minValue={minValue}\r\n            />\r\n        </>\r\n\r\n        <>\r\n            <Counter incrementF={incrementF}\r\n                     resetF={resetF}\r\n                     count={count}\r\n                     maxValue={maxValue}\r\n                     minValue={minValue}\r\n            />\r\n        </>\r\n    </>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {CounterPageContainer} from \"./components/counterBox/CounterPageContainer\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <CounterPageContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {counterReducer} from \"./counter-reducer\";\r\nimport {combineReducers, createStore} from \"redux\";\r\nimport {loadState, saveState} from \"./localStorage\";\r\n\r\nlet reducers = combineReducers({\r\n    counterPage: counterReducer\r\n})\r\n\r\nexport let store = createStore(reducers, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counterPage: store.getState().counterPage\r\n    })\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch","import {RootState} from \"./redux-store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        return (serializedState === null) ? undefined : JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const saveState = (state: RootState) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./components/redux/redux-store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}